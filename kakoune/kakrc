# -----------------------------------------------------------------------------
# Basic Configuration

# show line numbers
add-highlighter global/ number-lines -relative -hlcursor -min-digits 3

# soft-wrap lines to always be visible within the terminal
add-highlighter global/ wrap

# show matching brackets
add-highlighter global/ show-matching

# show trailing whitespace
# not working - may need to modify colorscheme
add-highlighter global/trailing regex '[ \t\f\v]+$' 0:Whitespace

# highlight special comment words
add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+rb

# width (in spaces) used for indentation, 0 means a tab character
set-option global indentwidth 4

# width of a tab character
set-option global tabstop 4

# -----------------------------------------------------------------------------
# Mappings

# use space for user mode leader key
# ----------------------------------

# rebind <space>
map global normal <space> , -docstring 'leader'

# rebind <backspace> to replace the old function of <space>
map global normal <backspace> <space> -docstring 'remove all sels except main'
map global normal <a-backspace> <a-space> -docstring 'remove main sel'

# extend view mappings
# --------------------

map global view K t -docstring 'cursor on top'
map global view J b -docstring 'cursor on bottom'

# perform a literal (non-regex) search in user mode
# -------------------------------------------------

# This could be extended so that '/' activates a special search user mode.
# Additional functions could then be added such as case-insensitive search.

map global user / ':exec /<ret>\Q\E<left><left>' -docstring 'literal search'

# remap macro & back-a-word operations
# ------------------------------------

# Remap macro record/playback bindings
map global normal <a-^> q
map global normal ^ Q

# Remap select-word-on-left bindings
map global normal q b
map global normal Q B
map global normal <a-q> <a-b>
map global normal <a-Q> <a-B>

# -----------------------------------------------------------------------------
# Hooks

# tab complete
# ------------

hook global InsertCompletionShow .* %{
    try %{
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}

hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# jk to escape
# ------------

hook global InsertChar k %{ try %{
    exec -draft hH <a-k>jk<ret> d
    exec <esc>

    # Ensure tab is re-enabled after being used for auto-complete.
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}}

# change cursor color in insert mode
# ----------------------------------
# TODO: This should optimally be be based on the theme.
# https://discuss.kakoune.com/t/changing-the-cursor-colour-in-insert-mode/394

# hook global ModeChange insert:.* %{
#   set-face global PrimaryCursor rgb:ffffff,rgb:000000+F
# }

# hook global ModeChange .*:insert %{
#   set-face global PrimaryCursor rgb:ffffff,rgb:008800+F
# }

# -----------------------------------------------------------------------------
# Language Settings

# add matches for sh filetype
# ---------------------------

hook global BufCreate .*\.(conf) %{
    set-option buffer filetype sh
}

# -------------------------------------
# Linting & Formatting

define-command -docstring "Create user mode mappings for lint commands" \
enable-lint-mode %{
    declare-user-mode lint-mode
    # 'l' is used for lsp-mode, so an alternate activation key has to be chosen here
    map window user t ': enter-user-mode lint-mode<ret>' -docstring "lint mode"
    map window lint-mode b ': lint-buffer<ret>' -docstring "lint buffer"
    map window lint-mode j ': lint-next-message<ret>' -docstring "next lint message"
    map window lint-mode k ': lint-previous-message<ret>' -docstring "previous lint message"
    map window lint-mode h ': lint-hide-diagnostics<ret>' -docstring "hide lint diagnostics"
    map window lint-mode s ': lint-selections<ret>' -docstring "lint each selection"
}

# set clojure-specific settings
# -----------------------------

hook global WinSetOption filetype=clojure %{
    echo -debug "Setting clojure filetype configuration options"
    
    set-option window tabstop 2
    set-option window indentwidth 2
    
    # NOTE: This option requires clj-kondo to be installed.
    set-option window lintcmd 'clj-kondo --lint'
    enable-lint-mode
}

hook global BufWritePost .*\.(clj|cljc|cljs) %{
    lint-buffer
}

# -----------------------------------------------------------------------------
# Integrations

# Use rg for the grep command
# ---------------------------

# NOTE: You must install ripgrep for this to work.

set-option global grepcmd 'rg --column'

# copy to system clipboard
# ------------------------

# Save primary selection to system clipboard on all copy operations.
hook global RegisterModified '"' %{ nop %sh{
    # Copy to Ubuntu clipboard
    printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
    # Copy to tmux clipboard
    #tmux set-buffer -- "$kak_main_reg_dquote"
    # Copy to Windows clipboard from WSL
    #printf %s "$kak_main_reg_dquote" | clip.exe
}}

# paste from system clipboard
# ---------------------------

map global user P '!xsel --output --clipboard<ret>' -docstring 'Paste system clipboard before cursor'
map global user p '<a-!>xsel --output --clipboard<ret>' -docstring 'Paste system clipboard after cursor'

# paste from windows file
# -----------------------
# NOTE: I recommend opening this file in an editor in Windows that can auto-convert line endings.
#       Notepad++ has this option

#map global user P '<a-!>cat /mnt/c/Users/jyee_/clipboard.txt<ret>' -docstring 'paste from clipboard.txt (after)'
#map global user p '!cat /mnt/c/Users/jyee_/clipboard.txt<ret>' -docstring 'paste from clipboard.txt (before)'

# -----------------------------------------------------------------------------
# Experimental Scripts

# Experimental execute-pytest-on-current-file script
# --------------------------------------------------
# This script provides an example of sending the output of a shell command
#  to a fifo buffer.
# TODO: Move this into its own script file

# define-command -docstring "Execute pytest on current file" \
# pytest %{
#     evaluate-commands %sh{
#         # Create a temporary fifo for communication
#         output=$(mktemp -d -t kak-temp-XXXXXXXX)/fifo
#         mkfifo ${output}
#         # run command detached from the shell
#         ( pytest $kak_buffile > ${output} 2>&1 & ) > /dev/null 2>&1 < /dev/null
#         # Open the file in Kakoune and add a hook to remove the fifo
#         echo "edit! -fifo ${output} *pytest-results*
#               hook buffer BufClose .* %{ nop %sh{ rm -r $(dirname ${output})} }"
#     }
# }

# windowing-mode
# --------------

declare-user-mode windowing
map global windowing n ': new<ret>' -docstring "Open a new Kakoune client to the right"
map global user w ': enter-user-mode windowing<ret>' -docstring "windowing mode"

# -----------------------------------------------------------------------------
# Plugins

# ------------------------------------------------------------------------------
# Configuration for the `plug.kak` plugin
# https://github.com/robertmeta/plug.kak

# NOTE: You must first clone the git repo for this to work:
#       `mkdir -p ~/.config/kak/plugins/`
#       `git clone https://github.com/robertmeta/plug.kak ~/.config/kak/plugins/plug.kak`

source "%val{config}/plugins/plug.kak/rc/plug.kak"

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-mysticaltutor` plugin
# https://github.com/caksoylar/kakoune-mysticaltutor

plug "caksoylar/kakoune-mysticaltutor" theme config %{
    colorscheme mysticaltutor
}


# ------------------------------------------------------------------------------
# Configuration for the `kakoune-mysticaltutor-powerline` plugin
# https://github.com/jordan-yee/kakoune-mysticaltutor-powerline

plug "jordan-yee/kakoune-mysticaltutor-powerline" defer powerline %{
    powerline-theme mysticaltutor
}

# ------------------------------------------------------------------------------
# Configuration for the `powerline.kak` plugin
# https://github.com/jdugan6240/powerline.kak

plug "jdugan6240/powerline.kak" defer powerline %{
    set-option global powerline_shorten_bufname short
    set-option global powerline_separator ''
} config %{
    powerline-start
}

# ------------------------------------------------------------------------------
# Configuration for the `smarttab.kak` plugin
# https://github.com/andreyorst/smarttab.kak

plug "andreyorst/smarttab.kak" defer smarttab %{
    # how many spaces to delete when pressing <backspace>
    set-option global softtabstop %opt{tabstop}
} config %{
    hook global WinSetOption filetype=.* expandtab
}

# ------------------------------------------------------------------------------
# Configuration for the `case.kak` plugin
# https://gitlab.com/FlyingWombat/case.kak

plug "https://gitlab.com/FlyingWombat/case.kak" config %{
    map global normal '`' ': enter-user-mode case<ret>'
}

# ------------------------------------------------------------------------------
# Configuration for the `prelude.kak` plugin
# https://github.com/alexherbo2/prelude.kak

plug "alexherbo2/prelude.kak" config %{
    require-module prelude
}

# ------------------------------------------------------------------------------
# Configuration for the `auto-pairs.kak` plugin
# https://github.com/alexherbo2/auto-pairs.kak

# NOTE: Dependent on prelude plugin:
#       https://github.com/alexherbo2/prelude.kak

plug "alexherbo2/auto-pairs.kak" config %{
    require-module auto-pairs
    auto-pairs-enable
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-surround` plugin
# https://github.com/h-youhei/kakoune-surround

plug "h-youhei/kakoune-surround" config %{
    declare-user-mode surround

    map global surround s ':surround<ret>' -docstring 'surround'
    map global surround c ':change-surround<ret>' -docstring 'change'
    map global surround d ':delete-surround<ret>' -docstring 'delete'
    map global surround t ':select-surrounding-tag<ret>' -docstring 'select tag'

    map global user s ':enter-user-mode surround<ret>' -docstring 'surround mode'
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-vertical-selection` plugin
# https://github.com/occivink/kakoune-vertical-selection

# NOTE: This plugin is used by the kakoune-text-objects plugin.

plug 'occivink/kakoune-vertical-selection' config %{
    map global user v     ': vertical-selection-down<ret>' -docstring 'vertical selection down'
    map global user <a-v> ': vertical-selection-up<ret>' -docstring 'vertical selection up'
    map global user V     ': vertical-selection-up-and-down<ret>' -docstring 'vertical selection both'
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-text-objects` plugin
# https://github.com/delapouite/kakoune-text-objects

# NOTE: Vertical selections require the kakoune-vertical-selection plugin.

plug 'delapouite/kakoune-text-objects'

# TODO: Update the format of this plugin section to match the others.
# shortcuts for common selection commands
# ---------------------------------------

plug 'delapouite/kakoune-auto-percent'

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-buffers` plugin
# https://github.com/delapouite/kakoune-buffers

plug "delapouite/kakoune-buffers" config %{
    # NOTE: These mappings assume <b> has been rebound or isn't needed.
    map global normal b ': enter-buffers-mode<ret>' -docstring 'buffers'
    map global normal B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
}

# ------------------------------------------------------------------------------
# Configuration for the `TODO: plugin name` plugin
# TODO: url
# TODO: Configure phantom-selection

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-git-mode` plugin
# https://github.com/jordan-yee/kakoune-git-mode

plug "jordan-yee/kakoune-git-mode" config %{
    map global user g ': enter-user-mode git<ret>' -docstring "git mode"
}

# TODO: Update the format of this plugin section to match the others.
# repl mode
# ---------

plug "jordan-yee/kakoune-repl-mode" config %{
    map global user r ': enter-user-mode repl<ret>' -docstring "repl mode"
    require-module repl-mode
}

# ------------------------------------------------------------------------------
# Configuration for the `fzf.kak` plugin
# https://github.com/andreyorst/fzf.kak

# NOTE: You must first install fzf for this to work
#       Ubuntu 20.04: `sudo apt install fzf`
plug "andreyorst/fzf.kak" defer fzf %{
    # Change file search command to fd
    # NOTE: You must first install fd for this to work
    #       fd binary is fdfind in apt package
    #       alias to fd doesn't work here
    set-option global fzf_file_command 'fdfind --hidden --type f --exclude .git'
    set-option global fzf_cd_command 'fdfind --follow --hidden --type d --exclude .git'

    # Change grep search command to rg
    # NOTE: Your must first install ripgrep for this to work
    #       See https://github.com/BurntSushi/ripgrep#installation
    set-option global fzf_grep_command 'rg'

    # To discover other options or access command docs, view auto-complete
    # results of `:set-option global fzf` command.
} config %{
    map global normal <c-p> ': fzf-mode<ret>'
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-find` plugin
# https://github.com/occivink/kakoune-find

plug "occivink/kakoune-find"

# TODO: Update the format of this plugin section to match the others.
# parinfer - lisp parenthesis management
# --------------------------------------

# NOTE: You must first install Rust and Clang for this to work
#       See https://www.rust-lang.org/tools/install
#       Ubuntu 20.04:
#         `sudo apt install rustc`
#         `sudo apt install clang`
# NOTE: Installing this might take a while.
#       Use L command on the plugin list to see compilation output.
plug "eraserhd/parinfer-rust" do %{
    cargo install --force --path .
    # Optionally add cargo clean line to the do block to clean plugin from build
    # files, thus making it load a bit faster:
    cargo clean
} config %{
    hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %{
        parinfer-enable-window -smart
    }
}

# TODO: Update the format of this plugin section to match the others.
# rep - execute clojure code in a repl
# ------------------------------------

# NOTE: You must first install the rep executable
#       See https://github.com/eraserhd/rep/blob/develop/rc/rep.kak
#       Recommended installation procedure:
#        1) Download binary from releases tab in GitHub.
#        2) cp the binary to /usr/local/bin/
#        3) cp the manual to /usr/local/share/man/man1/
# This plugin configuration installs the repo's /rc/rep.kak to integrate with
# the external executable.
plug "eraserhd/rep" tag "v0.1.2" subset %{
    rep.kak
}

# ------------------------------------------------------------------------------
# Configuration for the `kak-lsp` plugin
# https://github.com/kak-lsp/kak-lsp

# NOTE: You must first install rust for this to work:
#       https://www.rust-lang.org/learn/get-started

plug "ul/kak-lsp" tag "v8.0.0" do %{
    cargo build --release --locked
    cargo install --force --path .
} config %{
    set-option global lsp_completion_trigger "execute-keys 'h<a-h><a-k>\S[^\h\n,=;*(){}\[\]]\z<ret>'"

    # NOTE: Temporarily removed 'clojure' filetype since it's unstable.
    #   - After loading, it would appear to work until making a change, at which
    #     point it would become unresponsive.
    #   - Functions called using an alias would not be recognized inside of
    #     re-frame registrations.
    #   - I suspect the size of the project or file (1100 loc's) may have caused
    #     problems.

    # NOTE: You must install the appropriate servers for whichever filetypes
    #       you enable here.
    hook global WinSetOption filetype=(c|cpp|python) %{
        map window user "l" ": enter-user-mode lsp<ret>" -docstring "LSP mode"
        lsp-enable-window
        set-option window lsp_hover_anchor true
        set-face window DiagnosticError default+u
        set-face window DiagnosticWarning default+u
    }

    # Python settings
    # NOTE: You must install the Python lsp server for this to work.
    #       `pip install 'python-language-server[all]'`
    hook global WinSetOption filetype=python %{
        set-option global lsp_server_configuration pyls.configurationSources=["flake8"]
    }

    hook global KakEnd .* lsp-exit
}
