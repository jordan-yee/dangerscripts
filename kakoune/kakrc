# ------------------------------------------------------------------------------
# Basic Configuration

# show line numbers
add-highlighter global/ number-lines -relative -hlcursor -min-digits 3

# soft-wrap lines to always be visible within the terminal
add-highlighter global/ wrap
declare-user-mode highlighters
# WARNING: This is currently overriden by the custom (hug)sql script
map global user h ': enter-user-mode highlighters<ret>' -docstring 'toggle soft-wrap highlighter'
map global highlighters w ': rmhl global/wrap<ret>' -docstring "don't soft-wrap"
map global highlighters W ': addhl -override global/ wrap<ret>' -docstring 'do soft-wrap'

# show matching brackets
add-highlighter global/ show-matching

# show trailing whitespace
set-face global TrailingWhitespace default,rgb:586473 # rgb:F15050
add-highlighter global/ regex '[ \h]+$' 0:TrailingWhitespace

# show tab characters
add-highlighter global/ show-whitespaces -lf ' ' -spc ' ' -nbsp ' ' -tabpad '-' -indent ''

# highlight special comment words
add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+rb

# width (in spaces) used for indentation, 0 means a tab character
set-option global indentwidth 4

# width of a tab character
set-option global tabstop 4

# set background color of autowrap_column
set-option global autowrap_column 80
# use a slightly brightened version of the color scheme default (rgb:1E2227):
# https://github.com/caksoylar/kakoune-mysticaltutor
add-highlighter global/ column '%opt{autowrap_column}' default,rgb:2C323A

# default placement for new/terminal command
set-option global windowing_placement 'horizontal'

# ------------------------------------------------------------------------------
# Commands

define-command -override edit-dir \
-params 1 -shell-script-completion %sh{ find . -type d -mindepth 1 } \
-docstring 'edit-dir <directory>: open all files in the given directory' %{
    evaluate-commands %sh{
        # find "$(pwd)" -type f -exec printf "%s\n" "e {}" \; | tr '\n' ';' | sed 's/;$//'
        find "$1" -type f -exec printf "e %s\n" {} \;
    }
}
alias global ed edit-dir
complete-command edit-dir shell-script-candidates %{
    find . -type d -mindepth 1 | sed 's|^\./||'
}

# ------------------------------------------------------------------------------
# Mappings

# use space for user mode leader key
# ----------------------------------

# rebind <space>
# map global normal <space> , -docstring 'leader'

# rebind <backspace> to replace the old function of <space>
map global normal <backspace> , -docstring 'remove all sels except main'
map global normal <a-backspace> <a-,> -docstring 'remove main sel'

# extend view mappings
# --------------------

map global view K t -docstring 'cursor on top'
map global view J b -docstring 'cursor on bottom'

define-command prev-empty-line-to-top %{
    execute-keys -save-regs '/' 'Z<a-/>^\n<ret>vtz'
}
define-command next-empty-line-to-bottom %{
    execute-keys -save-regs '/' 'Z/^\n<ret>vbz'
}
map global normal <c-a-k> ':prev-empty-line-to-top<ret>' -docstring 'previous empty line on top'
map global normal <c-a-d> ':next-empty-line-to-bottom<ret>' -docstring 'next empty line on bottom'

# clear current line
# ------------------

map global normal D ': execute-keys xHd<ret>'

# remap macro & back-a-word operations
# ------------------------------------

# Remap macro record/playback bindings
map global normal <a-^> q
map global normal ^ Q

# Remap select-word-on-left bindings
map global normal q b
map global normal Q B
map global normal <a-q> <a-b>
map global normal <a-Q> <a-B>

# selection helpers
# -----------------

map global user z <a-Z>a -docstring 'Add selection to selections register'

declare-user-mode selection
map global selection d ': diff-selections<ret>' -docstring 'Diff the selections and display the result in a new buffer'
map global user s ': enter-user-mode selection<ret>' -docstring 'selection mode'

# ------------------------------------------------------------------------------
# Hooks

# tab complete
# ------------

hook global InsertCompletionShow .* %{
    try %{
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}

hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# jk to escape
# ------------

hook global InsertChar k %{ try %{
    exec -draft hH <a-k>jk<ret> d
    exec <esc>

    # Ensure tab is re-enabled after being used for auto-complete.
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>

    # Ensure PrimaryCursor color is reset
    # See 'change cursor color insert mode below'
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
}}

# change cursor color in insert mode
# ----------------------------------
# See https://discuss.kakoune.com/t/changing-the-cursor-colour-in-insert-mode/394
# NOTE: This should optimally be be based on the theme.
# NOTE: The ModeChange hook is not triggered when exiting insert mode with 'jk',
#       at least with the current implementation of that.

# hook global ModeChange .* %{
#     echo -debug "ModeChange hook triggered: %val{hook_param}"
# }

hook global ModeChange .*:insert:.* %{
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
}

hook global ModeChange .*:insert %{
    # NOTE: This fg color is from Mysticaltutor.
    # TODO: Set fg color to match the current one (the one given by the current theme.)
    set-face window PrimaryCursor rgb:1E2227,rgba:89f279ee
    set-face window PrimaryCursorEol rgb:1E2227,rgba:89f279aa
}

# delete trailing whitespace on save
# ----------------------------------

# define-command -docstring 'Delete trailing whitespace in the current buffer.' \
# remove-trailing-whitespace %{
#     try %{
#         execute-keys -draft %s\h+$<ret> d
#     }
# }

# hook global BufWritePre .* %{
#     remove-trailing-whitespace
# }

# ------------------------------------------------------------------------------
# Language Settings

# add filetype matches
# --------------------

hook global BufCreate .*\.(conf) %{
    set-option buffer filetype sh
}

hook global BufCreate .*\.(mdx) %{
    set-option buffer filetype markdown
}

# -------------------------------------
# Linting & Formatting

declare-user-mode lint-mode
define-command -hidden enable-lint-mode-mappings \
-docstring "Create window-scoped mappings for lint commands" %{
    map window lint-mode b ': lint-buffer<ret>' -docstring "lint buffer"
    map window lint-mode j ': lint-next-message<ret>' -docstring "next lint message"
    map window lint-mode k ': lint-previous-message<ret>' -docstring "previous lint message"
    map window lint-mode n ': lint-next-message<ret>' -docstring "next lint message"
    map window lint-mode p ': lint-previous-message<ret>' -docstring "previous lint message"
    map window lint-mode h ': lint-hide-diagnostics<ret>' -docstring "hide lint diagnostics"
    map window lint-mode s ': lint-selections<ret>' -docstring "lint each selection"

    # Bound to t insead of l to avoid collision with kak-lsp user mode mapping
    map window user t ': enter-user-mode lint-mode<ret>' -docstring "lint mode"
}

declare-user-mode format-mode
define-command -hidden enable-format-mode-mappings \
-docstring "Create window-scoped mappings for format commands" %{
    map window format-mode = ': format-buffer<ret>' -docstring 'format buffer'
    map window format-mode b ': format-buffer<ret>' -docstring 'format buffer'
    map window format-mode s ': format-selections<ret>' -docstring 'format selections'

    # Bound to = insead of f to avoid collision with phanton-selections user
    # mode mapping, and to match Vim's format binding.
    map window user = ': enter-user-mode format-mode<ret>' -docstring "format mode"
}

define-command -hidden set-format-with-prettier \
-docstring "Set format settings to use prettier" %{
    # NOTE: This option requires prettier:
    #       `npm install --save-dev --save-exact prettier`
    #         OR
    #       `yarn add --dev --exact prettier`
    set-option buffer formatcmd "npx prettier --stdin-filepath=%val{buffile}"
    hook buffer BufWritePre .* %{format-buffer}
    enable-format-mode-mappings
}

# hook groups starting with clojure- are all removed when leaving the filetype
# by kakoune's included clojure filetype script
hook global WinSetOption filetype=clojure -group clojure-fmt %{
    set-option window tabstop 2
    set-option window indentwidth 2

    # NOTE: This option requires clj-kondo to be installed.
    # See https://github.com/clj-kondo/clj-kondo/blob/master/doc/install.md#installation-script-macos-and-linux
    set-option buffer lintcmd 'clj-kondo --lint'

    # lint buffer on save
    # hook buffer BufWritePost .* %{lint-buffer}

    # Create lint-mode mappings for the window
    enable-lint-mode-mappings

    map global goto D "<esc>: lsp-declaration<ret>" -docstring 'go to declaration'

    # NOTE: This option requires kak-lsp to be set up for Clojure.
    hook buffer BufWritePre .* lsp-formatting-sync
}

hook global WinSetOption filetype=javascript %{
    set-option window tabstop 2
    set-option window indentwidth 2

    # Lint ----------------------------
    # NOTE: Linting is configured by the kak-jsts plugin (See below in file).

    # Set format settings to use prettier, create format-mode mappings
    set-format-with-prettier
}

hook global WinSetOption filetype=html %{
    set-option window tabstop 2
    set-option window indentwidth 2

    # TODO: https://www.html-tidy.org/
    # Lint ----------------------------
    # NOTE: This option requires :
    #       ``
    # set-option buffer lintcmd "tidy -e --gnu-emacs yes --quiet yes 2>&1"
    # lint buffer on save
    # hook buffer BufWritePost .* %{lint-buffer}
    # Create lint-mode mappings for the window
    # enable-lint-mode-mappings

    # Set format settings to use prettier, create format-mode mappings
    set-format-with-prettier
}

hook global WinSetOption filetype=css %{
    set-option window tabstop 4
    set-option window indentwidth 4

    # TODO: https://stylelint.io/
    # Lint ----------------------------
    # NOTE: This option requires :
    #       ``
    # set-option buffer lintcmd "stylelint --fix --stdin-filename='%val{buffile}'"
    # lint buffer on save
    # hook buffer BufWritePost .* %{lint-buffer}
    # Create lint-mode mappings for the window
    # enable-lint-mode-mappings

    # Set format settings to use prettier, create format-mode mappings
    set-format-with-prettier
}

hook global WinSetOption filetype=json %{
    set-option window tabstop 4
    set-option window indentwidth 4

    # Set format settings to use prettier, create format-mode mappings
    set-format-with-prettier
}

hook global WinSetOption filetype=python %{
    # execute pytest for the current file
    source "%val{config}/custom/pytest.kak"
}

# ------------------------------------------------------------------------------
# Integrations

# ripgrep (rg) / :grep command enhancements
# -----------------------------------------
# NOTE: You must install ripgrep for this functionality to work.
#
# Useful rg options:
# --smart-case : case insensitive if search is all lowercase, otherwise case sensitive
# --max-count 1 : only 1 matching line per file is returned
# --sort SORTBY : sort results in ascending order
# --sortr SORTBY : sort results in descending order
#   SORTBY : path, modified, accessed, created, none
# --word-regexp : only show matches surrounded by word boundaries

set-option global grepcmd 'rg --column --smart-case'

# system clipboard
# ----------------

# Save primary selection to system clipboard on all copy operations.
hook global RegisterModified '"' %{ nop %sh{
    # Copy to Ubuntu clipboard
    # NOTE: This system clipboard integration requires xsel to be installed.
    #       `apt install -y xsel`
    #printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
    # Copy to tmux clipboard
    #tmux set-buffer -- "$kak_main_reg_dquote"
    # Copy to Windows clipboard from WSL
    printf %s "$kak_main_reg_dquote" | clip.exe
}}

define-command yank-system-clipboard \
-docstring 'save system clipboard to yank/paste register' %{
    evaluate-commands %sh{
        windows_clipboard=$(powershell.exe -noprofile Get-Clipboard | tr -s '\r' '\n' | sed -z '$ s/\n$//')
        printf "set-register dquote '%s'\n" "$windows_clipboard"
    }
}

# paste from system clipboard
# map global user P '!xsel --output --clipboard<ret>' -docstring 'Paste system clipboard before cursor'
# map global user p '<a-!>xsel --output --clipboard<ret>' -docstring 'Paste system clipboard after cursor'
map global user P -docstring 'Paste system clipboard before cursor' \
":eval yank-system-clipboard<ret>P"
# "!powershell.exe -noprofile Get-Clipboard | tr -s '\r' '\n' | sed -z '$ s/\n$//'<ret>"
map global user p -docstring 'Paste system clipboard after cursor' \
":eval yank-system-clipboard<ret>p"
# "<a-!>powershell.exe -noprofile Get-Clipboard | tr -s '\r' '\n' | sed -z '$ s/\n$//'<ret>"
map global user R -docstring 'Replace selections with system clipboard' \
":eval yank-system-clipboard<ret>R"

# kakoune.cr
# ----------
# See https://github.com/alexherbo2/kakoune.cr

evaluate-commands %sh{
    kcr init kakoune
}


# gh (GitHub CLI)
# ---------------

define-command -override gh-browse \
-docstring 'Open file to current line in GitHub in your browser' %{
    # TODO: check
    # - existence of gh command
    # - that we're in a github repo
    echo %sh{
        project_root=$(PWD) # assuming kak's working directory is project root
        gh browse "$kak_reg_percent:$kak_cursor_line"
        # printf "gh browse %s\n" "$kak_reg_percent:$kak_cursor_line"
        printf "Opening current file in GitHub...\n"
    }
}

# ------------------------------------------------------------------------------
# Custom / Experimental Scripts

source "%val{config}/custom/kakscript.kak"

# search user mode
# ----------------

source "%val{config}/custom/search.kak"
map global user / ': enter-user-mode search<ret>' -docstring 'search mode'
map global search j ':set global jumpclient %val{client}<ret>' -docstring 'set current client as jumpclient'
map global search J ":unset global jumpclient" -docstring 'clear jumpclient'
map global search t ':set global toolsclient %val{client}<ret>' -docstring 'set current client as toolsclient'
map global search T ":unset global toolsclient" -docstring 'clear toolsclient'

# Unix diff utility
# -----------------

source "%val{config}/custom/diff.kak"

# repl/window function fixes for dwm + sakura
# -------------------------------------------

# source "%val{confing}/custom/repl-windowing-dwm-sakura.kak"

# Quickly insert a section comment
# --------------------------------

source "%val{config}/custom/comment-sections.kak"
install-comment-mode-mappings
map global user c ': enter-user-mode comment-mode<ret>' -docstring 'comment mode'

# Depth-first grep searches
# -------------------------

source "%val{config}/custom/grep-stack.kak"

# Quickly select & navigate filepaths
# -----------------------------------

source "%val{config}/custom/filepath.kak"
filepath-enable-mappings
map global selection f ': enter-user-mode -lock filepath<ret>j' -docstring 'select next filepath & lock filepath mode'

# Wrap text to within autowrap_column
# -----------------------------------

source "%val{config}/custom/wrap-mode.kak"

# open instance of br on the left
# -------------------------------

define-command -override open-br \
-docstring 'Open an instance of br file browser on the left.' %{
    nop %sh{ zsh -c 'tmux split-window -hbf -l 80; tmux send-keys br C-m' }
    echo 'Opening br...'
}

alias global br open-br

# expand tmux pane width to fit buffer contents
# ---------------------------------------------

source "%val{config}/custom/auto-window-resize.kak"

# (Hug)SQL helper commands
# ------------------------

source "%val{config}/custom/sql.kak"

# ------------------------------------------------------------------------------
# Plugins

# ------------------------------------------------------------------------------
# Configuration for the `plug.kak` plugin
# https://github.com/andreyorst/plug.kak

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

# ------------------------------------------------------------------------------
# Configuration for the `powerline.kak` plugin
# https://github.com/andreyorst/powerline.kak

# NOTE: Powerline module definition (requires the powerline plugin)
hook global ModuleLoaded powerline %{ require-module powerline_parinfer }
provide-module powerline_parinfer %{
    # NOTE: Here I'm relying on the option: `parinfer_current_mode_modeline`
    # This is managed by manual changes to the parinfer rc script, which only
    # exist local at the time of writing this comment.

    declare-option -hidden bool powerline_module_parinfer true
    set-option -add global powerline_modules 'parinfer'

    define-command -hidden powerline-parinfer %{
        evaluate-commands %sh{
            default=$kak_opt_powerline_base_bg
            next_bg=$kak_opt_powerline_next_bg
            normal=$kak_opt_powerline_separator
            thin=$kak_opt_powerline_separator_thin
            if [ "$kak_opt_powerline_module_parinfer" = "true" ]; then
                fg=$kak_opt_powerline_color10
                bg=$kak_opt_powerline_color11
                if [ ! -z "$kak_opt_parinfer_current_mode" ]; then
                    [ "$next_bg" = "$bg" ] && separator="{$fg,$bg}$thin" || separator="{$bg,${next_bg:-$default}@powerline_base}$normal"
                    echo "set-option -add global powerlinefmt %{$separator{$fg,$bg} %opt{powerline_parinfer_current_mode} }"
                    echo "set-option global powerline_next_bg $bg"
                fi
            fi
        }
    }

    declare-option -hidden str powerline_parinfer_current_mode
    define-command -hidden powerline-update-parinfer-current-mode %{
        set-option buffer powerline_parinfer_current_mode %sh{
            current_mode=$kak_opt_parinfer_current_mode_modeline
            enabled=$kak_opt_parinfer_enabled
            if [ -z "$current_mode" ] || [ "$enabled" = "false" ]; then
                current_mode="off"
            fi
            printf "%s\n" "(${current_mode})"
        }
    }

    define-command -hidden powerline-parinfer-setup-hooks %{
        remove-hooks global powerline-parinfer
        evaluate-commands %sh{
            if [ "$kak_opt_powerline_module_parinfer" = "true" ]; then
                printf "%s\n" "hook -group powerline-parinfer global WinDisplay .* %{ powerline-update-parinfer-current-mode }"
                printf "%s\n" "hook -group powerline-parinfer global WinSetOption parinfer_current_mode_modeline=.* %{ powerline-update-parinfer-current-mode }"
                # somewhat works
                # printf "%s\n" "hook -group powerline-parinfer global ModeChange .* %{ powerline-update-parinfer-current-mode }"
            fi
        }
    }

    define-command -hidden powerline-toggle-parinfer -params ..1 %{
        evaluate-commands %sh{
            [ "$kak_opt_powerline_module_parinfer" = "true" ] && value=false || value=true
            if [ -n "$1" ]; then
                [ "$1" = "on" ] && value=true || value=false
            fi
            echo "set-option global powerline_module_parinfer $value"
        }
    }
}

plug "andreyorst/powerline.kak" defer powerline %{
    set-option global powerline_ignore_warnings true
    # default: powerline-format global 'git bufname line_column mode_info filetype client session position'
    powerline-format global 'git bufname line_column mode_info filetype parinfer client session position'
    powerline-separator global none
} defer powerline_bufname %{
    set-option global powerline_shorten_bufname short
} config %{
    powerline-start
}

# ------------------------------------------------------------------------------
# Configuration for the `smarttab.kak` plugin
# https://github.com/andreyorst/smarttab.kak

# noexpandtab: use tab character to indent and align
# smarttab:    use tab character to indent and space to align
# expandtab:   use space character to indent and align

plug "andreyorst/smarttab.kak" defer smarttab %{
    # set how many spaces to delete when pressing <backspace>
    set-option global softtabstop %opt{tabstop}
} config %{
    # these languages will use `expandtab' behavior
    hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|sh|perl|javascript|python|yaml|sql) expandtab
    # these languages will use `noexpandtab' behavior
    hook global WinSetOption filetype=(makefile|gas|go) noexpandtab
    # these languages will use `smarttab' behavior
    hook global WinSetOption filetype=(c|cpp) smarttab
}

# ------------------------------------------------------------------------------
# Configuration for the `fzf.kak` plugin
# https://github.com/andreyorst/fzf.kak

# NOTE: You must first install fzf for this to work
#       Ubuntu 20.04: `sudo apt install fzf`
plug "andreyorst/fzf.kak" config %{
    map global normal <c-p> ': fzf-mode<ret>'

    # open fzf file search when a new instance of Kakoune is first opened
    # hook -once global WinDisplay \*scratch\* %{
    #     require-module fzf
    #     require-module fzf-file
    #     fzf-file
    # }
} defer "fzf-file" %{
    # Change file search command to fd
    # NOTE: You must first install fd for this to work
    #       fd binary is fdfind in apt package
    #       alias to fd doesn't work here
    set-option global fzf_file_command 'fd --hidden --type f --exclude .git'

    set-option global fzf_highlight_command 'bat'
} defer "fzf-cd" %{
    set-option global fzf_cd_command 'fd --follow --hidden --type d --exclude .git'
} defer "fzf-grep" %{
    # Change grep search command to rg
    # NOTE: Your must first install ripgrep for this to work
    #       See https://github.com/BurntSushi/ripgrep#installation
    set-option global fzf_grep_command 'rg'
}

# ------------------------------------------------------------------------------
# Configuration for the `mru-files` plugin
# https://gitlab.com/kstr0k/mru-files.kak

plug 'https://gitlab.com/kstr0k/mru-files.kak.git' %{
    # optional customization: set these *before* plugin loads
    #set global mru_files_history %sh{echo "$HOME/.local/share/kak/mru.txt"}
} demand mru-files %{  # %{} needed even if empty
    # suggested mappings: *after* plugin loads
    # think "go alt[ernate]-f[iles]"
    map global goto <a-f> '<esc>: mru-files ' -docstring 'mru-files'
    map global goto <a-F> '<esc>: mru-files-related<ret>' -docstring 'mru-files-related'
}
# optional: enable kakhist (see kakhist/README.md)

# ------------------------------------------------------------------------------
# Configuration for the `luar` plugin
# https://github.com/gustavo-hms/luar

# plug "gustavo-hms/luar"

# ------------------------------------------------------------------------------
# Configuration for the `peneira` plugin
# https://github.com/gustavo-hms/peneira

# plug "gustavo-hms/peneira" demand luar %{
#     require-module peneira
# }

# ------------------------------------------------------------------------------
# Configuration for the `peneira-filters` plugin
# https://codeberg.org/mbauhardt/peneira-filters

# plug "https://codeberg.org/mbauhardt/peneira-filters" demand peneira %{
#     map global normal <c-p> ': peneira-filters-mode<ret>'
# } demand peneira-filters %{
#     # requires peneira, peneira-filters, & mru-files
#     map global peneira-filters m ': peneira-mru<ret>' -docstring 'List most recently used files'
# }

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-mysticaltutor` plugin
# https://github.com/caksoylar/kakoune-mysticaltutor

plug "caksoylar/kakoune-mysticaltutor" theme config %{
    colorscheme mysticaltutor
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-mysticaltutor-powerline` plugin
# https://github.com/jordan-yee/kakoune-mysticaltutor-powerline

# NOTE: Make sure this comes after the powerline configuration

plug "jordan-yee/kakoune-mysticaltutor-powerline" defer powerline_mysticaltutor %{
    powerline-theme mysticaltutor
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-git-mode` plugin
# https://github.com/jordan-yee/kakoune-git-mode

plug "jordan-yee/kakoune-git-mode" config %{
    set-option global git_mode_use_structured_quick_commit true
    declare-git-mode
    map global user g ': enter-user-mode git<ret>' -docstring "git mode"
    map global git o ': tmux-terminal-window lazygit<ret>' -docstring "open lazygit in new window"
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-plugin-quick-dev` plugin
# https://github.com/jordan-yee/kakoune-plugin-quick-dev

# load-path "/home/jordan/github/jordan-yee/kakoune-plugin-quick-dev/"
plug "jordan-yee/kakoune-plugin-quick-dev" config %{
  quick-dev-mode-init
  quick-dev-register-default-mappings
  map global user q ': enter-user-mode quick-dev<ret>' -docstring 'quick-dev mode'
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-clojure` plugin
# https://github.com/jordan-yee/kakoune-clojure

# NOTE: This provides commands used by mappings in the `kakoune-repl-mode`
# config, as well as a custom `rep.kak` script, which requires `rep` to be
# installed (see further below).
# load-path "~/gitub/jordan-yee/kakoune-clojure"
plug "jordan-yee/kakoune-clojure" config %{
    rep-register-default-mappings
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-repl-mode` plugin
# https://github.com/jordan-yee/kakoune-repl-mode

# load-path "~/github/jordan-yee/kakoune-repl-mode/"
plug "jordan-yee/kakoune-repl-mode" config %{
    require-module repl-mode
    map global user r ': enter-user-mode repl<ret>' -docstring "repl mode"
    repl-mode-register-default-mappings

    declare-user-mode repl-commands
    map global repl-commands c ': clojure-repl-command<ret>' -docstring "Prompt for a REPL command to evaluate on the current selection"
    map global repl-commands l ': clojure-repl-command dlet<ret>' -docstring "dlet"
    map global repl-commands t ': clojure-repl-command clojure.test/run-test<ret>' -docstring "run-test"

    declare-user-mode ns-repl-commands
    map global ns-repl-commands n ': clojure-namespace-repl-command<ret>' -docstring "Prompt for a REPL command to evaluate on the current namespace symbol"
    map global ns-repl-commands i ': clojure-namespace-repl-command in-ns<ret>' -docstring "in-ns"
    map global ns-repl-commands r ': clojure-namespace-repl-command remove-ns<ret>' -docstring "remove-ns"
    # map global ns-repl-commands t ': clojure-namespace-repl-command clojure.test/run-tests<ret>' -docstring "run-tests"
    map global ns-repl-commands t ': clojure-namespace-repl-command kaocha.repl/run<ret>' -docstring "run all tests in namespace"

    hook global WinSetOption filetype=clojure %{
      set-option window repl_mode_new_repl_command 'lein repl'
      complete-command -menu repl-mode-set-new-repl-command shell-script-candidates %{
          printf '%s\n' 'lein repl :connect' 'lein repl'
      }

      map window repl c ': enter-user-mode repl-commands<ret>' -docstring "REPL Commands"
      map window repl n ': enter-user-mode ns-repl-commands<ret>' -docstring "Namespace REPL Commands"

      hook -once -always window WinSetOption filetype=.* %{
        unset-option window repl_mode_new_repl_command
        unmap window repl c
        unmap window repl n
      }
    }
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-chtsh` plugin
# https://github.com/jordan-yee/kakoune-chtsh

plug "jordan-yee/kakoune-chtsh"

# ------------------------------------------------------------------------------
# Configuration for the `case.kak` plugin
# https://gitlab.com/FlyingWombat/case.kak

plug "https://gitlab.com/FlyingWombat/case.kak" config %{
    map global normal '`' ': enter-user-mode case<ret>'
}

# ------------------------------------------------------------------------------
# Configuration for the `auto-pairs.kak` plugin
# https://github.com/alexherbo2/auto-pairs.kak

# NOTE: Dependent on kakoune.cr:
#       https://github.com/alexherbo2/kakoune.cr

plug "alexherbo2/auto-pairs.kak" config %{
    set-option global auto_pairs { }
    enable-auto-pairs
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-surround` plugin
# https://github.com/h-youhei/kakoune-surround

# NOTE: Switching to kakoune-mirror instead
# plug "h-youhei/kakoune-surround" config %{
#     declare-user-mode surround

#     map global surround s ':surround<ret>' -docstring 'surround'
#     # TODO: Fix change-surround
#     map global surround c ':change-surround<ret>' -docstring 'change'
#     map global surround d ':delete-surround<ret>' -docstring 'delete'
#     map global surround t ':select-surrounding-tag<ret>' -docstring 'select tag'

#     map global user s ':enter-user-mode surround<ret>' -docstring 'surround mode'
# }

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-find` plugin
# https://github.com/occivink/kakoune-find

plug "occivink/kakoune-find"

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-phantom-selection` plugin
# https://github.com/occivink/kakoune-phantom-selection

plug 'occivink/kakoune-phantom-selection' config %{
    define-command phantom-selection-activate %{
        phantom-selection-add-selection
        map window normal ( ": phantom-selection-iterate-prev<ret>"
        map window normal ) ": phantom-selection-iterate-next<ret>"
    }

    define-command phantom-selection-stop %{
        phantom-selection-select-all
        phantom-selection-clear
        unmap window normal (
        unmap window normal )
    }

    map global user f ": phantom-selection-activate<ret>" \
    -docstring "Start phantom selection"
    map global user F ": phantom-selection-stop<ret>" \
    -docstring "Stop phantom selection"
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-vertical-selection` plugin
# https://github.com/occivink/kakoune-vertical-selection

# NOTE: This plugin is used by the kakoune-text-objects plugin.

plug 'occivink/kakoune-vertical-selection' config %{
    map global user v     ': vertical-selection-down<ret>' -docstring 'vertical selection down'
    map global user <a-v> ': vertical-selection-up<ret>' -docstring 'vertical selection up'
    map global user V     ': vertical-selection-up-and-down<ret>' -docstring 'vertical selection both'
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-sort-selections` plugin
# https://github.com/occivink/kakoune-sort-selections

plug 'occivink/kakoune-sort-selections' config %{
    # These mappings assume a selection user is defined above.
    map global selection s ': sort-selections<ret>' -docstring 'sort multiple selections'
    map global selection <a-s> ': sort-selections -reverse<ret>' -docstring 'sort multiple selections in reverse'
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-expand` plugin
# https://github.com/occivink/kakoune-expand

# NOTE: This is not working in a clj file, and I don't really use it, so
# disabling for now. I'll probably remove it at some point later.
# plug 'occivink/kakoune-expand' config %{
#     map -docstring "expand" global normal <c-x> ': expand<ret>'

#     # 'lock' mapping where pressing <space> repeatedly will expand the selection
#     declare-user-mode expand
#     map -docstring "expand" global expand <space> ': expand<ret>'
#     map -docstring "expand ↻" global user x       ': expand; enter-user-mode -lock expand<ret>'
# }

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-text-objects` plugin
# https://github.com/delapouite/kakoune-text-objects

# NOTE: Vertical selections require the kakoune-vertical-selection plugin.

plug 'delapouite/kakoune-text-objects'

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-auto-percent` plugin
# https://github.com/delapouite/kakoune-auto-percent

plug 'delapouite/kakoune-auto-percent' config %{
    unmap global normal (
    unmap global normal )
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-buffers` plugin
# https://github.com/delapouite/kakoune-buffers

plug "delapouite/kakoune-buffers" config %{
    # NOTE: These mappings assume <b> has been rebound or isn't needed.
    map global normal b ': enter-buffers-mode<ret>' -docstring 'buffers'
    map global normal B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-mirror` plugin
# https://github.com/delapouite/kakoune-mirror

plug 'delapouite/kakoune-mirror' config %{
    map global normal "'" ': enter-user-mode -lock mirror<ret>'
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-inc-dec` plugin
# https://gitlab.com/Screwtapello/kakoune-inc-dec/

try %{ source "%val{config}/plugins/kakoune-inc-dec/inc-dec.kak"
} catch %{ echo -debug "Failed to load `kakoune-inc-dec` plugin: not yet installed" }
plug "https://gitlab.com/Screwtapello/kakoune-inc-dec/" noload config %{
    map global normal <c-a> ': inc-dec-modify-numbers + 1<ret>'
    map global normal <c-a-a> ': inc-dec-modify-numbers - 1<ret>'
}

# ------------------------------------------------------------------------------
# Configuration for the `kak-rainbow` plugin
# https://github.com/Bodhizafa/kak-rainbow

plug 'Bodhizafa/kak-rainbow' config %{
    # [Partial Pallette](https://coolors.co/81f3e6-997ef1-ea4348-66d421-5c7aff)
    #                                rgb:FFFFFF+b cyan       green      blue       purple     red        orange     yellow
    set-option global rainbow_colors rgb:FFFFFF+b rgb:81F3E6 rgb:66D421 rgb:5C7AFF rgb:997EF1 rgb:EA4348 rgb:FF870F rgb:FCD569

    hook global WinSetOption filetype=(scheme|lisp|clojure) %{
        rainbow-enable-window
    }
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-lsp` plugin
# https://github.com/kakoune-lsp/kakoune-lsp
# https://github.com/kakoune-lsp/kakoune-lsp/releases

# NOTE: You must first install rust for this to work:
#       https://www.rust-lang.org/learn/get-started

plug "kakoune-lsp/kakoune-lsp" do %{
    cargo install --locked --force --path .
    # kak-lsp.toml has been deprecated in favor of language-specific kakrc hooks
    # mkdir -p ~/.config/kak-lsp
    # cp -n ~/kak-lsp.toml ~/.config/kak-lsp/
} config %{
    # Documentation on available options can be seen here:
    # https://github.com/kak-lsp/kak-lsp#configuring-kakoune

    set-option global lsp_completion_trigger "execute-keys 'h<a-h><a-k>\S[^\h\n,=;*(){}\[\]]\z<ret>'"
    set-option global lsp_auto_highlight_references true
    set-option global lsp_timeout 0 # disable lsp timeout
    set-option global lsp_file_watch_support true

    map global user "l" ": enter-user-mode lsp<ret>" -docstring "LSP mode"

    # Diagnostics
    map global lsp "n" ": lsp-find-error --include-warnings<ret>" \
    -docstring "find next diagnostic"
    map global lsp "p" ": lsp-find-error --previous --include-warnings<ret>" \
    -docstring "find previous diagnostic"

    # Snippets
    map global insert <tab> '<a-;>: try %{ lsp-snippets-select-next-placeholders } catch %{ execute-keys -with-hooks <lt>tab> }<ret>' \
    -docstring 'Select next snippet placeholder'

    # Overridden to use general kak command, whatever that's been configured to be
    # Here, we're intending to use a standalone graalvm cljfmt binary.
    map global lsp f "<esc>: format-buffer<ret>" -docstring 'format contents of the buffer'

    set-option global lsp_hover_anchor true
    set-face global DiagnosticError default+u
    set-face global DiagnosticWarning default+u

    # Markdown rendering in info box:
    # https://github.com/kak-lsp/kak-lsp
    # By default all of these faces use `Information`
    # I updated some of them using faces from the mysticaltutor theme, so
    # make sure that's installed/loaded first.
    face global InfoDefault               Information
    face global InfoBlock                 block
    face global InfoBlockQuote            block
    face global InfoBullet                bullet
    face global InfoHeader                header
    face global InfoLink                  link
    face global InfoLinkMono              mono
    face global InfoMono                  mono
    face global InfoRule                  Information
    face global InfoDiagnosticError       Error
    face global InfoDiagnosticHint        Information
    face global InfoDiagnosticInformation Information
    face global InfoDiagnosticWarning     Information

    # Clojure Server Config:
    #   - https://clojure-lsp.io/installation/#script
    #   - NOTE: Installed using script method.
    hook -group lsp-filetype-clojure global BufSetOption filetype=(clojure) %{
        set-option buffer lsp_servers %{
            [clojure-lsp]
            root_globs = ["deps.edn", "project.clj", ".git", ".hg"]
            settings_section = "_"
            [clojure-lsp.settings._]
            # See https://clojure-lsp.io/settings/#all-settings
            # source-paths-ignore-regex = ["resources.*", "target.*"]
        }
    }

    hook global WinSetOption filetype=(clojure) %{

        # TODO: disable parinfer only when inserting a snippet completion
        # hook -once global InsertCompletionHide .* parinfer-disable-window

        # Select Clojure def's
        map global object e '<a-semicolon>lsp-object Function Variable<ret>' \
        -docstring 'LSP Function or Variable (def expressions)'

        # Goto ns alias in require
        map global goto D "<esc>: lsp-declaration<ret>" -docstring 'go to declaration'

        lsp-enable-window
        # Debugging kak-lsp:
        #
        # View debug info in a dedicated terminal:
        # 1. Run kak-lsp in another terminal (up to 4 v's):
        #    `kak-lsp -s main -vvv`
        # 2. Start kakoune with:
        #    `kak -s main`
        # 3. Disable the exit hook (bottom of this config block) if you want.
        #
        # Save debug info to a log file:
        # 1. Enable the following command to enable logging:
        # set-option global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
        #    - This should come after `lsp-enable-window`
        #    - Default lsp_cmd: `kak-lsp -s %val{session}`
    }

    # Python settings
    # NOTE: You must install the Python lsp server for this to work.
    #       `pip install 'python-language-server[all]'`
    # hook global WinSetOption filetype=python %{
    #     set-option global lsp_server_configuration pyls.configurationSources=["flake8"]
    # }

    # I think this may be deprecated
    # hook global KakEnd .* lsp-exit
}

# ------------------------------------------------------------------------------
# Configuration for the `kak-jsts` plugin
# https://github.com/schemar/kak-jsts

# NOTE: This plugin requires the following dependencies:
#       - eslint-formatter-kakoune
#         `npm i -g eslint-formatter-kakoune`
#       - jq

# plug "schemar/kak-jsts" config %{
#     hook global WinSetOption filetype=javascript %{
#         # lint buffer on save
#         hook buffer BufWritePost .* %{lint-buffer}
#         # Create lint-mode mappings for the window
#         enable-lint-mode-mappings
#     }
# }

# ------------------------------------------------------------------------------
# Configuration for the `parinfer-rust` plugin
# https://github.com/eraserhd/parinfer-rust

# NOTE: You must first install Rust and Clang for this to work
#       See https://www.rust-lang.org/tools/install
#       Ubuntu 20.04:
#         `sudo apt install rustc`
#         `sudo apt install clang`
# NOTE: Installing this might take a while.
#       Use L command on the plugin list to see compilation output.
plug "eraserhd/parinfer-rust" do %{
    cargo install --force --path .
    # Optionally add cargo clean line to the do block to clean plugin from build
    # files, thus making it load a bit faster:
    cargo clean
} config %{
    declare-user-mode parinfer
    map global parinfer s ': parinfer-disable-window<ret>: parinfer-enable-window -smart<ret>' \
    -docstring 'enable (smart)'
    map global parinfer i ': parinfer-disable-window<ret>: parinfer-enable-window -indent<ret>' \
    -docstring 'enable (preserve indentation, fix parens)<ret>'
    map global parinfer p ': parinfer-disable-window<ret>: parinfer-enable-window -paren<ret>' \
    -docstring 'enable (preserve parents, fix indentation)<ret>'
    map global parinfer d ': parinfer-disable-window<ret>' -docstring 'disable'

    hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %{
        evaluate-commands %sh{
            # special_files_regex='.*\(project\.clj\|profiles\.clj\)$'
            special_files_regex='.*\(project\.clj\|profiles\.clj\|deps\.edn\|tests\.edn)$'
            # if the file DOES NOT match one of the special files, enable parinfer
            if ! expr $kak_buffile : $special_files_regex 1>/dev/null; then
                # printf '%s\n' 'echo -debug "enabling parinfer for window"'
                printf %s 'parinfer-enable-window -paren'
            # if the file DOES match one of the special files, disable parinfer
            else
                # printf '%s\n' 'echo -debug "disabling parinfer for window"'
                printf %s 'try %{ parinfer-disable-window }'
            fi
        }

        map window user i ': enter-user-mode parinfer<ret>' -docstring 'parinfer mode'
        map window normal u ': try %{ parinfer-disable-window }<ret>u'
        map window normal U ': try %{ parinfer-disable-window }<ret>U'
    }
}


# ------------------------------------------------------------------------------
# Configuration for the `eraserhd/kak-ansi` plugin
# https://github.com/eraserhd/kak-ansi

plug "eraserhd/kak-ansi"

# ------------------------------------------------------------------------------
# Configuration for the `eraserhd/rep` plugin
# https://github.com/eraserhd/rep

# NOTE: You must first install the rep executable
# NOTE: In order to install using `make`, you may need a2x.
#       Ubuntu 20.04: `sudo apt install asciidoc-base`
# NOTE: A customized version of the rep.kak script was moved to the new
#       `kakoune-clojure` plugin, registered above.
