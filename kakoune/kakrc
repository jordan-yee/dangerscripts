# ------------------------------------------------------------------------------
# Basic Configuration

# show line numbers
add-highlighter global/ number-lines -relative -hlcursor -min-digits 3

# soft-wrap lines to always be visible within the terminal
add-highlighter global/ wrap

# show matching brackets
add-highlighter global/ show-matching

# show trailing whitespace
set-face global TrailingWhitespace default,rgb:F15050
add-highlighter global/ regex '[ \h]+$' 0:TrailingWhitespace

# show tab characters
add-highlighter global/ show-whitespaces -lf ' ' -spc ' ' -nbsp ' ' -tabpad '-'

# highlight special comment words
add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+rb

# width (in spaces) used for indentation, 0 means a tab character
set-option global indentwidth 4

# width of a tab character
set-option global tabstop 4

# ------------------------------------------------------------------------------
# Mappings

# use space for user mode leader key
# ----------------------------------

# rebind <space>
map global normal <space> , -docstring 'leader'

# rebind <backspace> to replace the old function of <space>
map global normal <backspace> <space> -docstring 'remove all sels except main'
map global normal <a-backspace> <a-space> -docstring 'remove main sel'

# extend view mappings
# --------------------

map global view K t -docstring 'cursor on top'
map global view J b -docstring 'cursor on bottom'

# clear current line
# ------------------

map global normal D ': execute-keys xHd<ret>'


# perform a literal (non-regex) search in user mode
# -------------------------------------------------

# This could be extended so that '/' activates a special search user mode.
# Additional functions could then be added such as case-insensitive search.

map global user / ':exec /<ret>\Q\E<left><left>' -docstring 'literal search'

# remap macro & back-a-word operations
# ------------------------------------

# Remap macro record/playback bindings
map global normal <a-^> q
map global normal ^ Q

# Remap select-word-on-left bindings
map global normal q b
map global normal Q B
map global normal <a-q> <a-b>
map global normal <a-Q> <a-B>

# ------------------------------------------------------------------------------
# Hooks

# tab complete
# ------------

hook global InsertCompletionShow .* %{
    try %{
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}

hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

# jk to escape
# ------------

hook global InsertChar k %{ try %{
    exec -draft hH <a-k>jk<ret> d
    exec <esc>

    # Ensure tab is re-enabled after being used for auto-complete.
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>

    # Ensure PrimaryCursor color is reset
    # See 'change cursor color insert mode below'
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
}}

# change cursor color in insert mode
# ----------------------------------
# See https://discuss.kakoune.com/t/changing-the-cursor-colour-in-insert-mode/394
# TODO: This should optimally be be based on the theme.
# TODO: The ModeChange hook is not triggered when exiting insert mode with 'jk',
#       at least with the current implementation of that.

# hook global ModeChange .* %{
#     echo -debug "ModeChange hook triggered: %val{hook_param}"
# }

hook global ModeChange .*:insert:.* %{
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
}

hook global ModeChange .*:insert %{
    # NOTE: This fg color is from Mysticaltutor.
    # TODO: Set fg color to match the current one (the one given by the current theme.)
    set-face window PrimaryCursor rgb:1E2227,rgba:65f150ee
    set-face window PrimaryCursorEol rgb:1E2227,rgba:65f150aa
}

# delete trailing whitespace on save
# ----------------------------------

define-command -docstring 'Delete trailing whitespace in the current buffer.' \
remove-trailing-whitespace %{
    try %{
        execute-keys -draft %s\h+$<ret> d
    }
}

hook global BufWritePre .* %{
    remove-trailing-whitespace
}

# ------------------------------------------------------------------------------
# Language Settings

# add matches for sh filetype
# ---------------------------

hook global BufCreate .*\.(conf) %{
    set-option buffer filetype sh
}

# -------------------------------------
# Linting & Formatting

# user modes can only be declared once, so these declarations are separated
# from their mappings, which are bound to window scope in filetype hooks.
declare-user-mode lint-mode
declare-user-mode format-mode

define-command -hidden enable-lint-mode-mappings \
-docstring "Create window-scoped mappings for lint commands" %{
    map window lint-mode b ': lint-buffer<ret>' -docstring "lint buffer"
    map window lint-mode j ': lint-next-message<ret>' -docstring "next lint message"
    map window lint-mode k ': lint-previous-message<ret>' -docstring "previous lint message"
    map window lint-mode n ': lint-next-message<ret>' -docstring "next lint message"
    map window lint-mode p ': lint-previous-message<ret>' -docstring "previous lint message"
    map window lint-mode h ': lint-hide-diagnostics<ret>' -docstring "hide lint diagnostics"
    map window lint-mode s ': lint-selections<ret>' -docstring "lint each selection"

    # Bound to t insead of l to avoid collision with kak-lsp user mode mapping
    map window user t ': enter-user-mode lint-mode<ret>' -docstring "lint mode"
}

define-command -hidden enable-format-mode-mappings \
-docstring "Create window-scoped mappings for format commands" %{
    map window format-mode = ': format-buffer<ret>' -docstring 'format buffer'
    map window format-mode b ': format-buffer<ret>' -docstring 'format buffer'
    map window format-mode s ': format-selections<ret>' -docstring 'format selections'

    # Bound to = insead of f to avoid collision with phanton-selections user
    # mode mapping, and to match Vim's format binding.
map window user = ': enter-user-mode format-mode<ret>' -docstring "format mode"
}

define-command -hidden set-format-with-prettier \
-docstring "Set format settings to use prettier" %{
    # NOTE: This option requires prettier:
    #       `npm install --save-dev --save-exact prettier`
    #         OR
    #       `yarn add --dev --exact prettier`
    set-option buffer formatcmd "npx prettier --stdin-filepath=%val{buffile}"
    hook buffer BufWritePre .* %{format-buffer}
    enable-format-mode-mappings
}

hook global WinSetOption filetype=clojure %{
    set-option window tabstop 2
    set-option window indentwidth 2

    # NOTE: This option requires clj-kondo to be installed.
    set-option buffer lintcmd 'clj-kondo --lint'

    # lint buffer on save
    hook buffer BufWritePost .* %{lint-buffer}

    # Create lint-mode mappings for the window
    enable-lint-mode-mappings
}

hook global WinSetOption filetype=javascript %{
    set-option window tabstop 2
    set-option window indentwidth 2

    # Lint ----------------------------
    # NOTE: Linting is configured by the kak-jsts plugin (See below in file).

    # Set format settings to use prettier, create format-mode mappings
    set-format-with-prettier
}

hook global WinSetOption filetype=html %{
    set-option window tabstop 2
    set-option window indentwidth 2

    # TODO: https://www.html-tidy.org/
    # Lint ----------------------------
    # NOTE: This option requires :
    #       ``
    # set-option buffer lintcmd "tidy -e --gnu-emacs yes --quiet yes 2>&1"
    # lint buffer on save
    # hook buffer BufWritePost .* %{lint-buffer}
    # Create lint-mode mappings for the window
    # enable-lint-mode-mappings

    # Set format settings to use prettier, create format-mode mappings
    set-format-with-prettier
}

hook global WinSetOption filetype=css %{
    set-option window tabstop 4
    set-option window indentwidth 4

    # TODO: https://stylelint.io/
    # Lint ----------------------------
    # NOTE: This option requires :
    #       ``
    # set-option buffer lintcmd "stylelint --fix --stdin-filename='%val{buffile}'"
    # lint buffer on save
    # hook buffer BufWritePost .* %{lint-buffer}
    # Create lint-mode mappings for the window
    # enable-lint-mode-mappings

    # Set format settings to use prettier, create format-mode mappings
    set-format-with-prettier
}

hook global WinSetOption filetype=json %{
    set-option window tabstop 4
    set-option window indentwidth 4

    # Set format settings to use prettier, create format-mode mappings
    set-format-with-prettier
}

# ------------------------------------------------------------------------------
# Integrations

# Use rg for the grep command
# ---------------------------

# NOTE: You must install ripgrep for this to work.

set-option global grepcmd 'rg --column'

# copy to system clipboard
# ------------------------

# Save primary selection to system clipboard on all copy operations.
hook global RegisterModified '"' %{ nop %sh{
    # Copy to Ubuntu clipboard
    printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
    # Copy to tmux clipboard
    #tmux set-buffer -- "$kak_main_reg_dquote"
    # Copy to Windows clipboard from WSL
    #printf %s "$kak_main_reg_dquote" | clip.exe
}}

# paste from system clipboard
# ---------------------------

map global user P '!xsel --output --clipboard<ret>' -docstring 'Paste system clipboard before cursor'
map global user p '<a-!>xsel --output --clipboard<ret>' -docstring 'Paste system clipboard after cursor'

# paste from windows file
# -----------------------
# NOTE: I recommend opening this file in an editor in Windows that can auto-convert line endings.
#       Notepad++ has this option

#map global user P '<a-!>cat /mnt/c/Users/jyee_/clipboard.txt<ret>' -docstring 'paste from clipboard.txt (after)'
#map global user p '!cat /mnt/c/Users/jyee_/clipboard.txt<ret>' -docstring 'paste from clipboard.txt (before)'

# kakoune.cr
# ----------
# See https://github.com/alexherbo2/kakoune.cr

evaluate-commands %sh{
    kcr init kakoune
}

# -----------------------------------------------------------------------------
# Experimental Scripts

# Experimental execute-pytest-on-current-file script
# --------------------------------------------------
# This script provides an example of sending the output of a shell command
#  to a fifo buffer.
# TODO: Move this into its own script file

# define-command -docstring "Execute pytest on current file" \
# pytest %{
#     evaluate-commands %sh{
#         # Create a temporary fifo for communication
#         output=$(mktemp -d -t kak-temp-XXXXXXXX)/fifo
#         mkfifo ${output}
#         # run command detached from the shell
#         ( pytest $kak_buffile > ${output} 2>&1 & ) > /dev/null 2>&1 < /dev/null
#         # Open the file in Kakoune and add a hook to remove the fifo
#         echo "edit! -fifo ${output} *pytest-results*
#               hook buffer BufClose .* %{ nop %sh{ rm -r $(dirname ${output})} }"
#     }
# }

# windowing-mode
# --------------

declare-user-mode windowing
map global windowing n ': new<ret>' -docstring "Open a new Kakoune client to the right"
map global user w ': enter-user-mode windowing<ret>' -docstring "windowing mode"

# -----------------------------------------------------------------------------
# Plugins

# ------------------------------------------------------------------------------
# Configuration for the `plug.kak` plugin
# https://github.com/andreyorst/plug.kak

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

# ------------------------------------------------------------------------------
# Configuration for the `powerline.kak` plugin
# https://github.com/andreyorst/powerline.kak

plug "andreyorst/powerline.kak" defer powerline %{
    set-option global powerline_ignore_warnings true
    powerline-separator global triangle
} defer powerline_bufname %{
    set-option global powerline_shorten_bufname short
} config %{
    powerline-start
}

# ------------------------------------------------------------------------------
# Configuration for the `smarttab.kak` plugin
# https://github.com/andreyorst/smarttab.kak

# noexpandtab: use tab character to indent and align
# smarttab:    use tab character to indent and space to align
# expandtab:   use space character to indent and align

plug "andreyorst/smarttab.kak" defer smarttab %{
    # set how many spaces to delete when pressing <backspace>
    set-option global softtabstop %opt{tabstop}
} config %{
    hook global WinSetOption filetype=\.* expandtab

    # To assign different behavior by filetype, add hooks here:
    # hook global WinSetOption filetype=(c|cpp) smarttab
}

# ------------------------------------------------------------------------------
# Configuration for the `fzf.kak` plugin
# https://github.com/andreyorst/fzf.kak

# NOTE: You must first install fzf for this to work
#       Ubuntu 20.04: `sudo apt install fzf`
plug "andreyorst/fzf.kak" config %{
    map global normal <c-p> ': fzf-mode<ret>'
} defer "fzf-file" %{
    # Change file search command to fd
    # NOTE: You must first install fd for this to work
    #       fd binary is fdfind in apt package
    #       alias to fd doesn't work here
    set-option global fzf_file_command 'fdfind --hidden --type f --exclude .git'

    set-option global fzf_highlight_command 'bat'
} defer "fzf-cd" %{
    set-option global fzf_cd_command 'fdfind --follow --hidden --type d --exclude .git'
} defer "fzf-grep" %{
    # Change grep search command to rg
    # NOTE: Your must first install ripgrep for this to work
    #       See https://github.com/BurntSushi/ripgrep#installation
    set-option global fzf_grep_command 'rg'
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-mysticaltutor` plugin
# https://github.com/caksoylar/kakoune-mysticaltutor

plug "caksoylar/kakoune-mysticaltutor" theme config %{
    colorscheme mysticaltutor
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-mysticaltutor-powerline` plugin
# https://github.com/jordan-yee/kakoune-mysticaltutor-powerline

# NOTE: Make sure this comes after the powerline configuration

plug "jordan-yee/kakoune-mysticaltutor-powerline" defer powerline_mysticaltutor %{
    powerline-theme mysticaltutor
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-git-mode` plugin
# https://github.com/jordan-yee/kakoune-git-mode

plug "jordan-yee/kakoune-git-mode" config %{
    map global user g ': enter-user-mode git<ret>' -docstring "git mode"
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-repl-mode` plugin
# https://github.com/jordan-yee/kakoune-repl-mode

plug "jordan-yee/kakoune-repl-mode" config %{
    map global user r ': enter-user-mode repl<ret>' -docstring "repl mode"
    require-module repl-mode
}

# ------------------------------------------------------------------------------
# Configuration for the `case.kak` plugin
# https://gitlab.com/FlyingWombat/case.kak

plug "https://gitlab.com/FlyingWombat/case.kak" config %{
    map global normal '`' ': enter-user-mode case<ret>'
}

# ------------------------------------------------------------------------------
# Configuration for the `auto-pairs.kak` plugin
# https://github.com/alexherbo2/auto-pairs.kak

# NOTE: Dependent on kakoune.cr:
#       https://github.com/alexherbo2/kakoune.cr

plug "alexherbo2/auto-pairs.kak" config %{
    require-module auto-pairs
    auto-pairs-enable
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-surround` plugin
# https://github.com/h-youhei/kakoune-surround

plug "h-youhei/kakoune-surround" config %{
    declare-user-mode surround

    map global surround s ':surround<ret>' -docstring 'surround'
    map global surround c ':change-surround<ret>' -docstring 'change'
    map global surround d ':delete-surround<ret>' -docstring 'delete'
    map global surround t ':select-surrounding-tag<ret>' -docstring 'select tag'

    map global user s ':enter-user-mode surround<ret>' -docstring 'surround mode'
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-find` plugin
# https://github.com/occivink/kakoune-find

plug "occivink/kakoune-find"

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-phantom-selection` plugin
# https://github.com/occivink/kakoune-phantom-selection

plug 'occivink/kakoune-phantom-selection' config %{
    map global user f ": phantom-selection-iterate-next<ret>" -docstring "Phantom selection next"
    map global user <a-f> ": phantom-selection-iterate-prev<ret>" -docstring "Phantom selection prev"
    map global user F ": phantom-selection-select-all; phantom-selection-clear<ret>" -docstring "Clear phantom selection"
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-vertical-selection` plugin
# https://github.com/occivink/kakoune-vertical-selection

# NOTE: This plugin is used by the kakoune-text-objects plugin.

plug 'occivink/kakoune-vertical-selection' config %{
    map global user v     ': vertical-selection-down<ret>' -docstring 'vertical selection down'
    map global user <a-v> ': vertical-selection-up<ret>' -docstring 'vertical selection up'
    map global user V     ': vertical-selection-up-and-down<ret>' -docstring 'vertical selection both'
}

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-text-objects` plugin
# https://github.com/delapouite/kakoune-text-objects

# NOTE: Vertical selections require the kakoune-vertical-selection plugin.

plug 'delapouite/kakoune-text-objects'

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-auto-percent` plugin
# https://github.com/delapouite/kakoune-auto-percent

plug 'delapouite/kakoune-auto-percent'

# ------------------------------------------------------------------------------
# Configuration for the `kakoune-buffers` plugin
# https://github.com/delapouite/kakoune-buffers

plug "delapouite/kakoune-buffers" config %{
    # NOTE: These mappings assume <b> has been rebound or isn't needed.
    map global normal b ': enter-buffers-mode<ret>' -docstring 'buffers'
    map global normal B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
}

# ------------------------------------------------------------------------------
# Configuration for the `kak-lsp` plugin
# https://github.com/kak-lsp/kak-lsp

# NOTE: You must first install rust for this to work:
#       https://www.rust-lang.org/learn/get-started

# NOTE: Temporarily removed 'clojure' filetype since it's unstable.
#   - After loading, it would appear to work until making a change, at which
#     point it would become unresponsive.
#   - Functions called using an alias would not be recognized inside of
#     re-frame registrations.
#   - I suspect the size of the project or file (1100 loc's) may have caused
#     problems.

plug "kak-lsp/kak-lsp" do %{
    cargo install --locked --force --path .
} config %{
    # Documentation on available options can be seen here:
    # https://github.com/kak-lsp/kak-lsp#configuring-kakoune

    set-option global lsp_completion_trigger "execute-keys 'h<a-h><a-k>\S[^\h\n,=;*(){}\[\]]\z<ret>'"
    set-option global lsp_auto_highlight_references true

    # NOTE: You must install the appropriate servers for whichever filetypes
    #       you enable here.
    hook global WinSetOption filetype=(c|cpp|python) %{
        map window user "l" ": enter-user-mode lsp<ret>" -docstring "LSP mode"

        lsp-enable-window
        # Debugging kak-lsp (The following command should come after lsp-enable/-window):
        #set-option global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
        # With the above command enabled, run `kak-lsp -s main` in another terminal

        set-option window lsp_hover_anchor true
        set-option window lsp_auto_highlight_references false
        set-face window DiagnosticError default+u
        set-face window DiagnosticWarning default+u
    }

    # Python settings
    # NOTE: You must install the Python lsp server for this to work.
    #       `pip install 'python-language-server[all]'`
    hook global WinSetOption filetype=python %{
        set-option global lsp_server_configuration pyls.configurationSources=["flake8"]
    }

    hook global KakEnd .* lsp-exit
}

# ------------------------------------------------------------------------------
# Configuration for the `kak-jsts` plugin
# https://github.com/schemar/kak-jsts

# NOTE: This plugin requires the following dependencies:
#       - eslint-formatter-kakoune
#         `npm i -g eslint-formatter-kakoune`
#       - jq

# plug "schemar/kak-jsts" config %{
#     hook global WinSetOption filetype=javascript %{
#         # lint buffer on save
#         hook buffer BufWritePost .* %{lint-buffer}
#         # Create lint-mode mappings for the window
#         enable-lint-mode-mappings
#     }
# }

# ------------------------------------------------------------------------------
# Configuration for the `parinfer-rust` plugin
# https://github.com/eraserhd/parinfer-rust

# NOTE: You must first install Rust and Clang for this to work
#       See https://www.rust-lang.org/tools/install
#       Ubuntu 20.04:
#         `sudo apt install rustc`
#         `sudo apt install clang`
# NOTE: Installing this might take a while.
#       Use L command on the plugin list to see compilation output.
plug "eraserhd/parinfer-rust" do %{
    cargo install --force --path .
    # Optionally add cargo clean line to the do block to clean plugin from build
    # files, thus making it load a bit faster:
    cargo clean
} config %{
    hook global WinSetOption filetype=(clojure|lisp|scheme|racket) %{
        parinfer-enable-window -smart
    }
}

# ------------------------------------------------------------------------------
# Configuration for the `eraserhd/rep` plugin
# https://github.com/eraserhd/rep

# NOTE: You must first install the rep executable
#       See https://github.com/eraserhd/rep/blob/develop/rc/rep.kak
#       Recommended installation procedure:
#        1) Download binary from releases tab in GitHub.
#        2) cp the binary to /usr/local/bin/
#        3) cp the manual to /usr/local/share/man/man1/
# This plugin configuration installs the repo's /rc/rep.kak to integrate with
# the external executable.
plug "eraserhd/rep" tag "v0.1.2" subset %{
    rep.kak
}
